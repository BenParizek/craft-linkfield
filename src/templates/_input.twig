{% import "_includes/forms" as forms %}
{% import _self as self %}

{% do view.registerAssetBundle('lenz\\linkfield\\assets\\field\\LinkFieldAsset') %}

{% set type = field.resolveSelectedLinkTypeName(value) %}
{% set linkTypes = field.enabledLinkTypes %}
{% set isEmpty = type == '' or type == 'empty' %}

{# Must be a macro as there is an issue with nested namespace nodes #}
{% macro typeSettings(linkTypes, value, disabled) %}
  {% for linkType in linkTypes %}
    {% namespace 'cpForm['~linkType.name~']' %}
      <div class="linkfield--typeOption {{ linkType.name }}{{ linkType.isSelected(value) ? '' : ' hidden' }}">
        {{ linkType.inputHtml(value, disabled)|raw }}
      </div>
    {% endnamespace %}
  {% endfor %}
{% endmacro %}

{% namespace name %}
  <div class="linkfield{% if field.hasSettings %} withSettings{% endif %}" id="{{ name }}">
    {% if linkTypes|length == 0 %}
      <p>{{ 'No link types available.'|t('typedlinkfield') }}</p>
    {% else %}
      <div class="linkfield--field">
        {% if field.hasSingleLinkType %}
          <input type="hidden" id="type" name="type" value="{{ type }}" />
        {% else %}
          <div class="linkfield--type">
            {{ forms.select({
              id:       'type',
              name:     'type',
              disabled: disabled,
              options:  field.enabledLinkTypeNames,
              value:    type
            }) }}
          </div>
        {% endif %}

        <div class="linkfield--typeOptions{% if field.hasSingleLinkType %} single{% endif %}">
          {{ self.typeSettings(linkTypes, value, disabled) }}
        </div>

        {% if field.allowTarget %}
          <div class="linkfield--target{{ isEmpty ? ' hidden' }}">
            {{ forms.checkboxField({
              id:       'target',
              name:     'target',
              value:    '_blank',
              label:    'Open in new window?'|t('typedlinkfield'),
              checked:  value.target is defined and value.target == '_blank' ? true : null,
              disabled: disabled,
            }) }}
          </div>
        {% endif %}
      </div>

      {% if field.hasSettings %}
        <div class="linkfield--settings{{ isEmpty ? ' hidden' }}">
          {% if field.allowCustomText %}
            {{ forms.textField({
              id:          'customText',
              name:        'customText',
              label:       'Custom link text'|t('typedlinkfield'),
              disabled:    disabled,
              placeholder: field.defaultText == '' ? 'Custom link text'|t('typedlinkfield') : field.defaultText|t('site'),
              value:       value.customText is defined and value.customText ? value.customText : '',
            }) }}
          {% endif %}

          {% if field.enableAriaLabel %}
            {{ forms.textField({
              id:       'ariaLabel',
              name:     'ariaLabel',
              label:    'Aria label'|t('typedlinkfield'),
              disabled: disabled,
              value:    value.ariaLabel is defined ? value.ariaLabel : "",
            }) }}
          {% endif %}

          {% if field.enableTitle %}
            {{ forms.textField({
              id:       'title',
              name:     'title',
              label:    'Title'|t('typedlinkfield'),
              disabled: disabled,
              value:    value.title is defined ? value.title : "",
            }) }}
          {% endif %}
        </div>
      {% endif %}
    {% endif %}
  </div>

  {% js %}
    new LinkField("{{ name|namespaceInputId }}");
  {% endjs %}
{% endnamespace %}
